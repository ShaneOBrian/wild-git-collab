---
title: "Wild Git Collaboration Practice"
format: 
  html:
    code-fold: show
execute: 
  warning: false
  message: false
---


## STEP 5: No merge conflicts!

```{r partner 1}
### In this code chunk, start with the diamonds dataset (built in to
### ggplot2 package) and create a plot of price vs. carat (or some other
### variables of your choice)

diamonds_plot <- ggplot(diamonds, aes(x = price, y = depth))+
  geom_line()+
  facet_wrap(~clarity)

diamonds_plot
```

```{r partner 2}
### In this code chunk, start with the diamonds dataset (built in to
### ggplot2 package) and create a subset based on filtering, e.g., 
### size greater than 1 carat or cut is "Ideal"

library(ggplot2)
library(tidyverse)
data = ggplot2::diamonds

premium = data |>
  mutate(cut=as.character(cut)) |>
  filter(cut == "Premium") |>
  mutate(cut=as.factor(cut))
```

## STEP 7: Uh oh, merge conflicts!

```{r break-it-1}
pairs(premium) # pairwise plot
new_premium = premium |>
  mutate(total=paste0(color,":",clarity))
```

## STEP 11: And even more merge conflicts!

```{r break-it-2}
premium_carat = premium |>
  filter(carat>0.5)
ggplot(premium_carat, aes(x=carat, y=depth)) +
  geom_point() +
  theme_bw()
  


```

## STEP 7: Uh oh, merge conflicts!

```{r break-it-1}
depth_plot <- ggplot(diamonds, aes(x = price, y = depth), color = color)+
  geom_line()

depth_plot
```

## STEP 11: And even more merge conflicts!

```{r break-it-2}
table_plot <- ggplot(diamonds, aes(x = price, y = table), color = color)+
  geom_line()

table_plot
```
